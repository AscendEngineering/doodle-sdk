{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-layout","title":"Project layout","text":"<p>Welcome to the Doodle SDK documentation. This guide will help you get started with the Doodle SDK and provide comprehensive information about its features and usage.</p> <p>Note: For more information on Doodle Radios, visit Doodle's Website.</p>"},{"location":"#usage","title":"Usage","text":"<p>Here is a basic example of how to use the Doodle SDK:</p> <pre><code>from doodle_sdk import Doodle\n\n# Create an instance of the Doodle class\ndoodle = Doodle(ip=\"192.168.1.1\", user=\"admin\", password=\"password\")\n\n# Connect to the Doodle\nif doodle.connect():\n    print(\"Connected successfully!\")\nelse:\n    print(\"Failed to connect.\")\n\n</code></pre>"},{"location":"doodle_sdk/doodle_radio/","title":"Doodle Radio","text":""},{"location":"doodle_sdk/doodle_radio/#doodle_sdk.doodle_radio.Doodle","title":"<code>Doodle</code>","text":"Source code in <code>src/doodle_sdk/doodle_radio.py</code> <pre><code>class Doodle:\n\n    def __init__(self, ip: str = None, user: str = None, password: str = None):\n        \"\"\"Creates an instance of the Doodle class\n\n        Args:\n            ip: IP address of the Doodle\n            user: username of the Doodle\n            password: password of the Doodle\n\n        Returns:\n            Instance of Doodle class\n\n        Raises:\n            None\n        \"\"\"\n\n        self._ip = ip\n        self._user = user\n        self._password = password\n        self._url = None\n        self._token = None\n\n        # Radio Settings\n        self._channel = None\n        self._frequency = None\n        self._channel_width = None\n\n        # Disable warnings for self-signed certificates\n        requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\n        self._session = requests.Session()\n\n    def connect(self, ip: str = None, user: str = None, password: str = None) -&gt; bool:\n        \"\"\"Connects to the Doodle and attempts to get the rpc session token\n\n        Args:\n            ip: IP address of the Doodle (required to connect)\n            user: username of the Doodle\n            password: password of the Doodle\n\n        Returns:\n            True if connection is successful, False if not\n\n        Raises:\n            TypeError: If the IP address of the Doodle was never set\n        \"\"\"\n\n        if ip: \n            self._ip = ip\n        elif (not self._ip):\n            raise TypeError(\"Must set an IP address before connecting\")\n\n        self._url = f'https://{self._ip}/ubus'\n\n        # keep the defaults if they never specified a user / password\n        if user:\n            self._user = user\n        elif (not self._user):\n            warnings.warn(\"No username specified, defaulting to \\\"user\\\"\")\n            self._user = \"user\"\n\n        if password:\n            self._password = password\n        elif (not self._password):\n            warnings.warn(\"No password specified, defaulting to \\\"DoodleSmartRadio\\\"\")\n            self._password = \"DoodleSmartRadio\"\n\n        login_payload = self._gen_login_payload(self._user, self._password)\n\n        for attempt in range(5): # Attempts to connect to the Doodle 5 times\n            try:\n                response = self._session.post(self._url, json=login_payload, verify=False, timeout=1)\n                data = response.json()\n\n                # Extract the token\n                self._token = data['result'][1]['ubus_rpc_session']\n                return True\n            except:\n                pass\n\n        return False\n\n    def get_associated_list(self):\n        \"\"\"Retrieves the list of associated stations from the Doodle.\n\n        Returns:\n            dict: A dictionary containing the translated response from the Doodle of associated stations.\n        Raises:\n            TypeError: If the Doodle is not connected (missing token or URL).\n            requests.exceptions.RequestException: If there is an issue with the HTTP request.\n        \"\"\"\n        if not self._token or not self._url:\n            raise TypeError(\"Must connect to the Doodle before requesting its associated stations\")\n\n        assoclist_payload = self._gen_assoclist_payload(self._token)\n        response = self._session.post(self._url, json=assoclist_payload, verify=False, timeout=1)\n        stats_response = stats.translate_stat_response(response.json())\n\n        return stats_response\n\n    def get_channel_frequency_width(self):\n        \"\"\"Retrieves the channel, frequency, and channel width from the Doodle device.\n\n        Raises:\n            TypeError: If the device is not connected (i.e., `_token` or `_url` is not set).\n\n        Returns:\n            tuple: A tuple containing the channel, frequency, and channel width.\n        \"\"\"\n        if not self._token or not self._url:\n            raise TypeError(\"Must connect to the Doodle before requesting its associated stations\")\n\n        channel_frequency_payload = self._gen_channel_frequency_payload(self._token)\n        response = self._session.post(self._url, json=channel_frequency_payload, verify=False, timeout=1)\n        self.channel, self.frequency, self.channel_width = settings.translate_channel_frequency_response(response.json())\n\n        return self.channel, self.frequency, self.channel_width\n\n    def _gen_channel_frequency_payload(self, token: str):\n\n        channel_frequency_payload = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"call\",\n            \"params\": [token, \"file\", \"exec\", {\"command\": \"iw\", \"params\": [\"wlan0\", \"info\"]}]\n        }\n        return channel_frequency_payload\n\n    def _gen_assoclist_payload(self, token: str):\n\n        assoclist_payload = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"call\",\n            \"params\": [token, \"iwinfo\", \"assoclist\", {\n                \"device\": \"wlan0\"\n            }]\n        }\n\n        return assoclist_payload\n\n    def _gen_login_payload(self, user: str, password: str) -&gt; Dict[str, str]:\n\n        login_payload = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"call\",\n            \"params\": [\"00000000000000000000000000000000\", \"session\", \"login\", {\"username\": user, \"password\": password}]\n        }\n\n        return login_payload\n</code></pre>"},{"location":"doodle_sdk/doodle_radio/#doodle_sdk.doodle_radio.Doodle.__init__","title":"<code>__init__(ip=None, user=None, password=None)</code>","text":"<p>Creates an instance of the Doodle class</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address of the Doodle</p> <code>None</code> <code>user</code> <code>str</code> <p>username of the Doodle</p> <code>None</code> <code>password</code> <code>str</code> <p>password of the Doodle</p> <code>None</code> <p>Returns:</p> Type Description <p>Instance of Doodle class</p> Source code in <code>src/doodle_sdk/doodle_radio.py</code> <pre><code>def __init__(self, ip: str = None, user: str = None, password: str = None):\n    \"\"\"Creates an instance of the Doodle class\n\n    Args:\n        ip: IP address of the Doodle\n        user: username of the Doodle\n        password: password of the Doodle\n\n    Returns:\n        Instance of Doodle class\n\n    Raises:\n        None\n    \"\"\"\n\n    self._ip = ip\n    self._user = user\n    self._password = password\n    self._url = None\n    self._token = None\n\n    # Radio Settings\n    self._channel = None\n    self._frequency = None\n    self._channel_width = None\n\n    # Disable warnings for self-signed certificates\n    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\n    self._session = requests.Session()\n</code></pre>"},{"location":"doodle_sdk/doodle_radio/#doodle_sdk.doodle_radio.Doodle.connect","title":"<code>connect(ip=None, user=None, password=None)</code>","text":"<p>Connects to the Doodle and attempts to get the rpc session token</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>IP address of the Doodle (required to connect)</p> <code>None</code> <code>user</code> <code>str</code> <p>username of the Doodle</p> <code>None</code> <code>password</code> <code>str</code> <p>password of the Doodle</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if connection is successful, False if not</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the IP address of the Doodle was never set</p> Source code in <code>src/doodle_sdk/doodle_radio.py</code> <pre><code>def connect(self, ip: str = None, user: str = None, password: str = None) -&gt; bool:\n    \"\"\"Connects to the Doodle and attempts to get the rpc session token\n\n    Args:\n        ip: IP address of the Doodle (required to connect)\n        user: username of the Doodle\n        password: password of the Doodle\n\n    Returns:\n        True if connection is successful, False if not\n\n    Raises:\n        TypeError: If the IP address of the Doodle was never set\n    \"\"\"\n\n    if ip: \n        self._ip = ip\n    elif (not self._ip):\n        raise TypeError(\"Must set an IP address before connecting\")\n\n    self._url = f'https://{self._ip}/ubus'\n\n    # keep the defaults if they never specified a user / password\n    if user:\n        self._user = user\n    elif (not self._user):\n        warnings.warn(\"No username specified, defaulting to \\\"user\\\"\")\n        self._user = \"user\"\n\n    if password:\n        self._password = password\n    elif (not self._password):\n        warnings.warn(\"No password specified, defaulting to \\\"DoodleSmartRadio\\\"\")\n        self._password = \"DoodleSmartRadio\"\n\n    login_payload = self._gen_login_payload(self._user, self._password)\n\n    for attempt in range(5): # Attempts to connect to the Doodle 5 times\n        try:\n            response = self._session.post(self._url, json=login_payload, verify=False, timeout=1)\n            data = response.json()\n\n            # Extract the token\n            self._token = data['result'][1]['ubus_rpc_session']\n            return True\n        except:\n            pass\n\n    return False\n</code></pre>"},{"location":"doodle_sdk/doodle_radio/#doodle_sdk.doodle_radio.Doodle.get_associated_list","title":"<code>get_associated_list()</code>","text":"<p>Retrieves the list of associated stations from the Doodle.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the translated response from the Doodle of associated stations.</p> <p>Raises:     TypeError: If the Doodle is not connected (missing token or URL).     requests.exceptions.RequestException: If there is an issue with the HTTP request.</p> Source code in <code>src/doodle_sdk/doodle_radio.py</code> <pre><code>def get_associated_list(self):\n    \"\"\"Retrieves the list of associated stations from the Doodle.\n\n    Returns:\n        dict: A dictionary containing the translated response from the Doodle of associated stations.\n    Raises:\n        TypeError: If the Doodle is not connected (missing token or URL).\n        requests.exceptions.RequestException: If there is an issue with the HTTP request.\n    \"\"\"\n    if not self._token or not self._url:\n        raise TypeError(\"Must connect to the Doodle before requesting its associated stations\")\n\n    assoclist_payload = self._gen_assoclist_payload(self._token)\n    response = self._session.post(self._url, json=assoclist_payload, verify=False, timeout=1)\n    stats_response = stats.translate_stat_response(response.json())\n\n    return stats_response\n</code></pre>"},{"location":"doodle_sdk/doodle_radio/#doodle_sdk.doodle_radio.Doodle.get_channel_frequency_width","title":"<code>get_channel_frequency_width()</code>","text":"<p>Retrieves the channel, frequency, and channel width from the Doodle device.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the device is not connected (i.e., <code>_token</code> or <code>_url</code> is not set).</p> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the channel, frequency, and channel width.</p> Source code in <code>src/doodle_sdk/doodle_radio.py</code> <pre><code>def get_channel_frequency_width(self):\n    \"\"\"Retrieves the channel, frequency, and channel width from the Doodle device.\n\n    Raises:\n        TypeError: If the device is not connected (i.e., `_token` or `_url` is not set).\n\n    Returns:\n        tuple: A tuple containing the channel, frequency, and channel width.\n    \"\"\"\n    if not self._token or not self._url:\n        raise TypeError(\"Must connect to the Doodle before requesting its associated stations\")\n\n    channel_frequency_payload = self._gen_channel_frequency_payload(self._token)\n    response = self._session.post(self._url, json=channel_frequency_payload, verify=False, timeout=1)\n    self.channel, self.frequency, self.channel_width = settings.translate_channel_frequency_response(response.json())\n\n    return self.channel, self.frequency, self.channel_width\n</code></pre>"}]}